# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  adminUiPassword: PasswordState
  memberships(where: OrganizationWhereInput! = {}, orderBy: [OrganizationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationWhereUniqueInput): [Organization!]
  membershipsCount(where: OrganizationWhereInput! = {}): Int
  adminMemberships(where: OrganizationWhereInput! = {}, orderBy: [OrganizationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationWhereUniqueInput): [Organization!]
  adminMembershipsCount(where: OrganizationWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  memberships: OrganizationManyRelationFilter
  adminMemberships: OrganizationManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input OrganizationManyRelationFilter {
  every: OrganizationWhereInput
  some: OrganizationWhereInput
  none: OrganizationWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  adminUiPassword: String
  memberships: OrganizationRelateToManyForUpdateInput
  adminMemberships: OrganizationRelateToManyForUpdateInput
  createdAt: DateTime
}

input OrganizationRelateToManyForUpdateInput {
  disconnect: [OrganizationWhereUniqueInput!]
  set: [OrganizationWhereUniqueInput!]
  create: [OrganizationCreateInput!]
  connect: [OrganizationWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  adminUiPassword: String
  memberships: OrganizationRelateToManyForCreateInput
  adminMemberships: OrganizationRelateToManyForCreateInput
  createdAt: DateTime
}

input OrganizationRelateToManyForCreateInput {
  create: [OrganizationCreateInput!]
  connect: [OrganizationWhereUniqueInput!]
}

type Organization {
  id: ID!
  name: String
  membersInOrganization(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  membersInOrganizationCount(where: UserWhereInput! = {}): Int
  adminsOfOrganization(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  adminsOfOrganizationCount(where: UserWhereInput! = {}): Int
  type(where: OrganizationTypeWhereInput! = {}, orderBy: [OrganizationTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationTypeWhereUniqueInput): [OrganizationType!]
  typeCount(where: OrganizationTypeWhereInput! = {}): Int
}

input OrganizationWhereUniqueInput {
  id: ID
}

input OrganizationWhereInput {
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
  id: IDFilter
  name: StringFilter
  membersInOrganization: UserManyRelationFilter
  adminsOfOrganization: UserManyRelationFilter
  type: OrganizationTypeManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input OrganizationTypeManyRelationFilter {
  every: OrganizationTypeWhereInput
  some: OrganizationTypeWhereInput
  none: OrganizationTypeWhereInput
}

input OrganizationOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input OrganizationUpdateInput {
  name: String
  membersInOrganization: UserRelateToManyForUpdateInput
  adminsOfOrganization: UserRelateToManyForUpdateInput
  type: OrganizationTypeRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input OrganizationTypeRelateToManyForUpdateInput {
  disconnect: [OrganizationTypeWhereUniqueInput!]
  set: [OrganizationTypeWhereUniqueInput!]
  create: [OrganizationTypeCreateInput!]
  connect: [OrganizationTypeWhereUniqueInput!]
}

input OrganizationUpdateArgs {
  where: OrganizationWhereUniqueInput!
  data: OrganizationUpdateInput!
}

input OrganizationCreateInput {
  name: String
  membersInOrganization: UserRelateToManyForCreateInput
  adminsOfOrganization: UserRelateToManyForCreateInput
  type: OrganizationTypeRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input OrganizationTypeRelateToManyForCreateInput {
  create: [OrganizationTypeCreateInput!]
  connect: [OrganizationTypeWhereUniqueInput!]
}

type OrganizationType {
  id: ID!
  name: String
}

input OrganizationTypeWhereUniqueInput {
  id: ID
  name: String
}

input OrganizationTypeWhereInput {
  AND: [OrganizationTypeWhereInput!]
  OR: [OrganizationTypeWhereInput!]
  NOT: [OrganizationTypeWhereInput!]
  id: IDFilter
  name: StringFilter
}

input OrganizationTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input OrganizationTypeUpdateInput {
  name: String
}

input OrganizationTypeUpdateArgs {
  where: OrganizationTypeWhereUniqueInput!
  data: OrganizationTypeUpdateInput!
}

input OrganizationTypeCreateInput {
  name: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createOrganization(data: OrganizationCreateInput!): Organization
  createOrganizations(data: [OrganizationCreateInput!]!): [Organization]
  updateOrganization(where: OrganizationWhereUniqueInput!, data: OrganizationUpdateInput!): Organization
  updateOrganizations(data: [OrganizationUpdateArgs!]!): [Organization]
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteOrganizations(where: [OrganizationWhereUniqueInput!]!): [Organization]
  createOrganizationType(data: OrganizationTypeCreateInput!): OrganizationType
  createOrganizationTypes(data: [OrganizationTypeCreateInput!]!): [OrganizationType]
  updateOrganizationType(where: OrganizationTypeWhereUniqueInput!, data: OrganizationTypeUpdateInput!): OrganizationType
  updateOrganizationTypes(data: [OrganizationTypeUpdateArgs!]!): [OrganizationType]
  deleteOrganizationType(where: OrganizationTypeWhereUniqueInput!): OrganizationType
  deleteOrganizationTypes(where: [OrganizationTypeWhereUniqueInput!]!): [OrganizationType]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, adminUiPassword: String!): UserAuthenticationWithPasswordResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  organizations(where: OrganizationWhereInput! = {}, orderBy: [OrganizationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationWhereUniqueInput): [Organization!]
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizationsCount(where: OrganizationWhereInput! = {}): Int
  organizationTypes(where: OrganizationTypeWhereInput! = {}, orderBy: [OrganizationTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationTypeWhereUniqueInput): [OrganizationType!]
  organizationType(where: OrganizationTypeWhereUniqueInput!): OrganizationType
  organizationTypesCount(where: OrganizationTypeWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
